version: '3.8'

services:
  docker-revp:
    build: .
    container_name: docker-revp
    ports:
      - "8080:8080"
    environment:
      # Required environment variables (customize these)
      - DOCKER_HOSTS=localhost
      - SSH_USER=${SSH_USER:-root}
      - SSH_PRIVATE_KEY=${SSH_PRIVATE_KEY}
      
      # Optional configuration
      - CADDY_API_URL=http://caddy:2019
      - RECONCILE_INTERVAL=300
      - LOG_LEVEL=INFO
      - LOG_MAX_SIZE=10
      - LOG_BACKUP_COUNT=5
      - API_PORT=8080
      - API_HOST=0.0.0.0
    volumes:
      # Mount log directory for persistence
      - ./logs:/var/log/docker-revp
      # Mount SSH directory for debugging (optional)
      - ./ssh-debug:/root/.ssh-debug
    networks:
      - monitor-network
    restart: unless-stopped
    depends_on:
      - caddy
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  caddy:
    image: caddy:2-alpine
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
      - "2019:2019"  # Admin API
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/data:/data
      - ./caddy/config:/config
    networks:
      - monitor-network
    restart: unless-stopped
    
    # Basic Caddyfile for testing
    command: |
      sh -c 'echo "# Basic Caddy configuration for testing
      
      # Enable admin API
      {
        admin 0.0.0.0:2019
      }
      
      # Default response for unmatched domains
      :80 {
        respond \"Caddy is running - Docker Reverse Proxy will manage routes\" 200
      }" > /etc/caddy/Caddyfile && caddy run --config /etc/caddy/Caddyfile'

  # Example web service with proper labels
  test-web:
    image: nginx:alpine
    container_name: test-web
    labels:
      - "snadboy.revp.domain=test.local"
      - "snadboy.revp.backend-port=80"
      - "snadboy.revp.backend-proto=http"
      - "snadboy.revp.backend-path=/"
      - "snadboy.revp.force-ssl=false"
    networks:
      - monitor-network
    restart: unless-stopped

networks:
  monitor-network:
    driver: bridge

volumes:
  caddy_data:
  caddy_config: